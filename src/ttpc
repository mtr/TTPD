#! /usr/bin/python -OO
# -*- coding: latin-1 -*-
# $Id$
"""
TUC Transfer Protocol Client (TTPC).

The TTPC makes it easy to test the TTPD and to create interfaces that
interacts with the TTPD.

Copyright (C) 2004, 2007, 2009, 2010 by Martin Thorsen Ranang
"""

__version__ = "$Rev$"
__author__ = "Martin Thorsen Ranang"

import commands
import cStringIO
import logging
import optparse
import os
import sys
import time
import xml.sax

import TTP.Message
import TTP.Options
import TTP.LogHandler

import locale

    
def parse_command_line():
    """Parse the command line options.
    """
    #basename = os.path.basename(sys.argv[0])
    parser = optparse.OptionParser(usage = '%prog [options] [request]',
                                   version = '%%prog %s' % (__version__))

    options = TTP.Options.common_options + TTP.Options.ttpc_options
    
    for option, description in options:
       TTP.Options.update_help(description)
       parser.add_option(*option, **description)
       
    # Parse the command line, to get the CONFIG_FILE value.
    options, _args = parser.parse_args()
    
    # Update the default values of PARSER, so that the values in the
    # CONFIG_FILE takes presendence over the programmed defaults, and
    # the command-line supplied options gets the highest precedence.
    TTP.Options.parse_configuration(options.config_file, parser)

    # Switch the (default) values of the port and remote_port options.
    options.remote_port, options.port = options.port, options.remote_port

    #TTP.Options.set_default(options, '--port', 8000),
    #TTP.Options.set_default(options, '--remote-port', 8081),
    
    # Reparse the command line to get the rest of the values.
    options, args = parser.parse_args()

    # print 'options.remote_port =', options.remote_port
    # print 'options.port =', options.port

    if options.web:
        options.trans_id = 'WEB'
        
    # Expand the any paths and make them absolute.
    options.log_file = os.path.abspath(os.path.expanduser(options.log_file))

    # Convert the textual representation of debug level into an
    # integer.
    options.log_level = TTP.LogHandler.log_levels[options.log_level]
    
    return options, args


def run_listening_server(options):
    import signal
    
    import TTP.Handler
    import TTP.Server
    
    # Create a server which will use a TUC Transfer Protocol Handler.
    server = TTP.Server.BaseThreadingTCPServer((options.ip_address,
                                                options.port),
                                               TTP.Handler.BaseHandler,
                                               options.log_file,
                                               options.log_level,
                                               options.high_load_limit,
                                               options.socket_queue_size)

    # In Python, when the `signal' module is available, interrupts
    # always go to the main thread.
    #
    # Register a signal handler for the hang-up signal.
    signal.signal(signal.SIGHUP, server.hangup)
    
    # Register signal handlers for terminating signals.
    signal.signal(signal.SIGINT, server.shutdown)
    signal.signal(signal.SIGTERM, server.shutdown)

    server.serve_forever()
    

def run_single_test(m, options, parser):
    try:
        meta, body = TTP.Message.communicate(m, (options.remote_ip_address,
                                                 options.remote_port), parser)
    except:
        meta, body = None, 'An error occured. Service currently not available.'
        return meta, body

    if options.web:
        b = TTP.Message.build(body.decode('latin-1'), parser)
        
        if options.show_technical:
            # Note: b.TUCAns.Technical evaluates to a tuple; hence,
            # the indexing.
            body = '%s<hr>%s<hr>' \
                   % (eval(b.TUCAns.Technical)[0].replace('\n', '<br>'),
                      b.TUCAns.NaturalLanguage.replace('\n', '<br>'))
        else:
            body = '%s' % \
                   b.TUCAns.NaturalLanguage.replace('\n', '<br>')
            
    return meta, body.encode('latin-1')


def run_test_mode(m, options, parser, pre_msg):
    stream = open(options.input_file, 'r')

    for i, line in enumerate(stream):
        m.MxHead.MsgId = i
        m._setMessage('%s%s' % (pre_msg, line))

        meta, body = run_single_test(m, options, parser)
        print '%d: %s\n%s' % (i, meta, body)
        
        time.sleep(3)

    stream.close()

        
def main():
    """Module mainline (for standalone execution).
    """
    options, args = parse_command_line()
    
    if options.listen_mode:
        
        run_listening_server(options)

    # If we did not start a listening server, we will act as a client.
    
    parser = xml.sax.make_parser()
    parser.setContentHandler(TTP.Message.XML2Message())
    
    m = TTP.Message.MessageRequest()
    m.MxHead.TransId = options.trans_id
    if options.phone_number:
        m.MxHead.ORName = options.phone_number
        
    if options.trans_id == 'LINGSMSIN':
        pre_msg = 'TEAM '
    else:
        pre_msg = ''
    
    if options.test_mode:

        if not os.access(options.input_file, os.R_OK):
            print "You have to supply a path to a readable " \
                  "test-input file.\n" \
                  "The current value, '%s', is not a readable file." \
                  % (options.input_file)
            sys.exit(1)
            
        run_test_mode(m, options, parser, pre_msg)
        
    else:

        # Request a single (non-alert) answer (as from a Web page).

        if options.fake_outgoing:
            m.MxHead.MsgId = None
            m.MxHead.TransId = 'LINGSMSOUT'
            m.MxHead.Aux.Billing = 2
            m.MxHead.Aux.InitProto = 'REMOTE'
            m.MxHead.Aux.InitIf = 'IP'
        else:
            m.MxHead.MsgId = -1
            
        m._setMessage('%s%s' % (pre_msg, args[0]))
        
        meta, body = run_single_test(m, options, parser)
        
        if options.log_level <= logging.DEBUG:
            print '%s\n%s' % (meta, body)
        else:
            print '%s' % (body)
            
    return

if __name__ == "__main__":
    main()
    
