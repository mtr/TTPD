#! /usr/bin/python -OOtt
# -*- coding: latin-1 -*-
# $Id$
"""
TUC Transfer Protocol Daemon (TTPD).

This is a socket server responsible for dispatching requests from Web
pages and SMS messages to TUC and for providing the clients with the
corresponding output.

Copyright (C) 2004, 2007, 2009 by Martin Thorsen Ranang
"""

__version__ = "2.1.0"
__author__ = "Martin Thorsen Ranang <mtr@ranang.org>"

# A diversity of imports.
import grp
import optparse
import os
import pwd
import signal
import sys

import TTP.Billing
import TTP.Handler
import TTP.LogHandler
import TTP.Options
import TTP.Server
import TTP.daemon


def run(options):
    """Setup the server and start the encapsulated-TUC thread pool.
    """
    
    log_level = TTP.LogHandler.log_levels[options.log_level]

    handler = TTP.Handler.sms_gateway_handlers[options.sms_gateway]
    #try:
    handler.initialize(options)
    #except OperationalError, e:
    
    
    # Note that if OPTIONS.TUC_ENCODING is None, it is set to the
    # value of SYS.STDIN.ENCODING.
    tuc_encoding = TTP.Options.tuc_external_encodings[options.tuc_encoding]
    
    tuc_environment = {'SP_CTYPE': tuc_encoding}
    
    # Create a server which will use a TUC Transfer Protocol handler.
    server = TTP.Server.ThreadingTCPServer((options.ip_address,
                                            options.port),
                                           handler,
                                           options.log_file,
                                           log_level,
                                           options.high_load_limit,
                                           options.socket_queue_size,
                                           options.tuc_pool_size,
                                           options.tuc_command,
                                           tuc_environment,
                                           options.run_tad,
                                           (options.remote_ip_address,
                                            options.remote_port),
                                           options.ttpd_pid_filename,
                                           TTP.Billing,
                                           options.db_address)
    
    # In Python, when the `signal' module is available, interrupts
    # always go to the main thread.
    #
    # Register a signal handler for the hang-up signal.
    signal.signal(signal.SIGHUP, server.hangup)
    
    # If the TAD is running, register a signal handler for storing the
    # current scheduler information.
    if options.run_tad:
        signal.signal(signal.SIGUSR1, server.store_tad_state)
        
    # Register signal handlers for terminating signals.
    signal.signal(signal.SIGINT, server.shutdown)
    signal.signal(signal.SIGTERM, server.shutdown)
    
    server.serve_forever()

def get_uid_gid(username, groupname):
    """Return the user id and group id corresponding to the USERNAME
    and GROUPNAME).
    """
    return pwd.getpwnam(username)[2], grp.getgrnam(groupname)[2]

def get_username_groupname(uid, gid):
    """Return the username and groupname corresponding to the UID and
    GID.
    """
    return pwd.getpwuid(uid)[0], grp.getgrgid(gid)[0]

def main():
    """Module mainline (for standalone execution).  Define and parse
    the various options that may be specified at the command line.
    """
    #basename = os.path.basename(sys.argv[0])

    # Define the parser options.
    parser = optparse.OptionParser(version='%%prog %s' % (__version__))

    # Merge the common (for both TTPD and TTPC) options.
    options = TTP.Options.common_options \
              + TTP.Options.ttpd_options \
              + TTP.Options.db_options
    
    for option, description in options:
        TTP.Options.update_help(description)
        parser.add_option(*option, **description)

    # Parse the command line, to get the CONFIG_FILE value.
    options, _args = parser.parse_args()
    
    # Update the default values of PARSER, so that the values in the
    # CONFIG_FILE takes presendence over the programmed defaults, and
    # the command-line supplied options gets the highest precedence.
    TTP.Options.parse_configuration(options.config_file, parser)

    # Reparse the command line to get the rest of the values.
    options, _args = parser.parse_args()
    
    # Expand any paths and make them absolute.
    options.log_file = os.path.abspath(os.path.expanduser(options.log_file))
    
    options.tuc_command = \
                        os.path.abspath(os.path.expanduser(options.tuc_command))
    if not os.access(options.tuc_command, os.X_OK):
        print "You have to supply a path to an executable TUC file.\n" \
              "The current value, '%s', is not an executable." \
              % (options.tuc_command)
        sys.exit(1)

    # Check if it will be possible to change the effective user ID of
    # this process.
    drop_root_privileges = True         # Assume it is possible.
    
    (options.uid, options.gid) = get_uid_gid(options.run_as_user,
                                             options.run_as_group)
    
    euid, _egid = os.geteuid(), os.getegid()
    
    if euid != 0 and euid != options.uid:
        print >> sys.stderr, \
              "Warning: only root can change the effective user id."
        drop_root_privileges = False    # Face the truth.

    # Try to automatically infer the appropriate value to be used as
    # the SICStus Prolog environment variable SP_CTYPE.
    if options.tuc_encoding is None:
        options.tuc_encoding = sys.stdin.encoding.lower()
    
    if options.daemon:
        # Daemonize the server.  This will put the server (to be
        # started) in the background and will give back the controll
        # to the process that executed this script.
        TTP.daemon.create_daemon()

    # Drop root privileges.
    if drop_root_privileges:
        TTP.daemon.drop_root_privileges(options.uid, options.gid)
        
    # Run the server.
    run(options)
    
    return

if __name__ == '__main__':
    main ()
