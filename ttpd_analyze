#! /usr/bin/python
# -*- coding: latin-1 -*-
# $Id$
"""
A script meant to make the job of analyzing the TTPD log files easier.


Copyright (C) 2004, 2007 by Martin Thorsen Ranang
"""

__version__ = "$Rev$"
__author__ = "Martin Thorsen Ranang"

import datetime
import optparse
import os
import re
import time

import TTP.Options
import TTP.LogHandler

from pychart import *

option_list = []

billing_re = re.compile('^%s ttpd INFO \[[0-9a-f]*\] ' \
                        'billing=(?P<billing>\d+) (?P<interface>\S+) ' \
                        '\((?P<host>[^,]+), (?P<trans_type>\w+)\) ' \
                        '(?P<what>\w+)$'
                        % (TTP.LogHandler.log_line_re_date))

resolutions = {
    'hours':
    ((lambda t: '%s Hour %02d' % (t[0], t[1])),
     (lambda t: (t.date(), t.time().hour)),
     'Hour',
     (lambda t1, t2: abs(t1 - t2).seconds > (60 * 60)),
     datetime.timedelta(hours=1)),
    'days':
    ((lambda t: '%s' % t),
     (lambda t: t.date()),
     'Date',
     (lambda t1, t2: abs(t1 - t2).days > 1),
     datetime.timedelta(days=1)),
    'weeks':
    ((lambda t: '%d Week %02d' % (t[0], t[1])),
     (lambda t: (t.isocalendar()[0], t.isocalendar()[1])),
     'Week',
     (lambda t1, t2: abs(t1 - t2).days > 7),
     datetime.timedelta(weeks=1)),
    'months':
    ('%d Month %02d',
     (lambda t: (t.year, t.month)),
     'Month',
     None), #datetime.timedelta(months=1)),
    'years':
    ('Year %d',
     (lambda t: t.year),
     'Year',
     None), #datetime.timedelta(years=1))
    }

resolution_order = ['year', 'month', 'week', 'day', 'hour']

weekdays = {
    0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday',
    4: 'Friday', 5: 'Saturday', 6: 'Sunday'
    }

months = {
    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May',
    6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October',
    11: 'November', 12: 'December'
    }

periods = {
    'hour_of_day':
    ((lambda t: '%02d' % t),
     (lambda t: (t.time().hour)),
     'Hour of Day'),
    'day_of_week':
    ((lambda t: weekdays[t]),
     (lambda t: t.weekday()),
     'Day of Week'),
    'week_of_year':
    ((lambda t: 'Week %02d' % t),
     (lambda t: (t.isocalendar()[1])),
     'Week of Year'),
    'month_of_year':
    ((lambda t: months[t]),
     (lambda t: (t.year, t.month)),
     'Month of Year'),
    }

ttpd_analyze_options = [
    (['-F', '--filter-only'],
     {'dest': 'filter_only',
      'default': False,
      'action': 'store_true',
      'help': 'if this flag is given, the program will only return a ' \
      'filtered list of "billing lines"'}),
    (['-c', '--cost'],
     {'dest': 'cost',
      'default': False,
      'action': 'store_true',
      'help': 'if this flag is given, the output is cost based ' \
      'instead of transaction based; the default is ' \
      'transaction based'}),
    (['-C', '--chart'],
     {'dest': 'chart',
      'default': None,
      'metavar': 'FILENAME',
      'help': 'if this flag is given, the program will output a graphical ' \
      'chart in the given filename'}),
    (['-r', '--resolution'],
     {'dest': 'resolution',
      'default': 'weeks',
      'metavar': 'TIME_UNITS',
      'help': "duration of TIME_UNITS for each temporal grouping; " \
      "available values are %s; the default is '%%(default)s'" %
      (', '.join(["'%s'" % x for x in resolutions]))}),
    (['-m', '--period'], # FIXEM: Maybe 'units' would match 'resolution'?
     {'dest': 'period',
      'default': None,
      'metavar': 'TIME_UNITS',
      'help': "duration of TIME_UNITS for each temporal grouping; " \
      "available values are %s; the default is '%%(default)s'" %
      (', '.join(["'%s'" % x for x in resolutions]))}),
    (['-f', '--from'],
     {'dest': 'start',
      'default': False,
      'metavar': 'DATE',
      'help': "only consider entries including and later than DATE"}),
    (['-t', '--to'],
     {'dest': 'end',
      'default': False,
      'metavar': 'DATE',
      'help': "only consider entries up to and including DATE"}),
    (['-w', '--week'],
     {'dest': 'week',
      'default': False,
      'metavar': 'YEAR,WEEK',
      'help': "only consider entries from WEEK of YEAR"}),
    (['-W', '--this-week'],
     {'dest': 'this_week',
      'default': False,
      'action': 'store_true',
      'help': "only consider entries from the current week"}),
    (['-u', '--unify-client-addresses-to'],
     {'dest': 'unified_client_address',
      'default': None,
      'metavar': 'ADDRESS',
      'help': "pretend all clients share the same ADDRESS"}),
    (['-g', '--group-by'],
     {'dest': 'group_by',
      'default': 'interface,host,trans_type',
      'metavar': 'FIELD,FIELD,...',
      'help': "the FIELDS used to discriminate between groups used; " \
      "available values are %s; the default is %%(default)s" %
      (', '.join(["'%s'" % x for x in billing_re.groupindex]))}),
    (['-R', '--restrict-to'],
     {'dest': 'restrict_to',
      'default': {},
      'metavar': 'FIELD=VALUE,FIELD=VALUE,...',
      'help': "the FIELD and value pairs used to restrict the output; " \
      "only groups fulfilling the criteria are output"})]


def file_filter(options, filename):
    """Parse a log file and return the necessary information."""
    file = open(filename, 'r')
    for line in file:
        m = billing_re.match(line)
        if m:
            yield m.groupdict() #m.groups()

    file.close()

def format_trans(trans, reparsable=True):
    if reparsable:
        return '%(date_str)s ttpd INFO [] billing=%(billing)d ' \
               '%(interface)s (%(host)s, ' \
               '%(trans_type)s) %(what)s' % trans
    else:
        return '%(date_str)s, %(billing)d, %(interface)s, %(host)s, ' \
               '%(trans_type)s, %(what)s' % trans

def convert_types(trans):
    trans['date_str'] = trans['date']
    tmp = time.strptime(trans['date'], '%Y-%m-%d %H:%M:%S')
    trans['date'] = datetime.datetime(*tmp[:6])
    trans['billing'] = int(trans['billing'])

def group_by(extract_discriminators, set):
    groups = {}
    
    for element in set:
        group = extract_discriminators(element)
        if group not in groups:
            groups[group] = [element]
        else:
            groups[group].append(element)

    return groups

def make_avg_chart(data, x_axis_title, filename):
    theme.get_options()
    
    can = canvas.init(fname=filename)
    
    ChartSize = (300, 200)
    MaxWidth=500
    chart_object.set_defaults(area.T, size = ChartSize)
    
    ar = area.T(x_coord=category_coord.T(data, 0),
                y_range=(0, max([x + plus for c, x, minus, plus in data])),
                x_axis=axis.X(label=x_axis_title),
                y_axis=axis.Y(label="Requests"))
    
    ar.add_plot(bar_plot.T(data=data,
                           fill_style=\
                           fill_style.Plain(bgcolor=color.cornflowerblue),
                           error_bar = error_bar.bar2, 
                           error_minus_col=3,
                           error_plus_col=2,
                           #line_style=None,
                           label = 'Average'))
    ar.draw(can)
    
    can.close()

def make_chart(data, x_axis_title, filename, transform):
    data = [(transform(d[1]), d[3]) for d in data]
    
    theme.get_options()
    
    can = canvas.init(fname=filename)

    chart_setup = {
        'default': {                           # Hours per day.
        'tic_interval': 3,
        'minor_tic_interval': 1,
        'chart_size_x': 500,
        'chart_size_y': 200,
        'max_width' : 500,
        'width': 5},
        7: {                            # Days per week.
        'tic_interval': 1,
        'minor_tic_interval': None,
        'chart_size_x': 500,
        'chart_size_y': 200,
        'max_width' : 500,
        'width': 5},
        24: {                           # Hours per day.
        'tic_interval': 3,
        'minor_tic_interval': 1,
        'chart_size_x': 500,
        'chart_size_y': 200,
        'max_width' : 500,
        'width': 5},
        52: {                          # Last 52 weeks.
        'tic_interval': 4,
        'minor_tic_interval': 1,
        'chart_size_x': 500,
        'chart_size_y': 200,
        'max_width' : 500,
        'width': 5},
        168: {                          # Hours per week.
        'tic_interval': 6,
        'minor_tic_interval': 1,
        'chart_size_x': 500,
        'chart_size_y': 200,
        'max_width' : 500,
        'width': 1}
        }
        
    if len(data) in chart_setup:
        cs = chart_setup[len(data)]
    else:
        print len(data)
        cs = chart_setup['default']
        
    ChartSize = (cs['chart_size_x'], cs['chart_size_y'])
    MaxWidth = cs['max_width']
    chart_object.set_defaults(area.T, size = ChartSize)

    ar = area.T(x_coord=category_coord.T(data, 0),legend=None,
                y_range=(0, None),
                x_axis=axis.X(label='Time', # x_axis_title,
                              tic_interval=cs['tic_interval'],
                              minor_tic_interval=cs['minor_tic_interval'],
                              format="/a-60/hL{}%s"),
                y_axis=axis.Y(label="Requests"))
    
    ar.add_plot(bar_plot.T(data=data,
                           fill_style=\
                           fill_style.Plain(bgcolor=color.cornflowerblue),
                           line_style=None,
                           width=cs['width'],
                           label='Requests'
                           ))

    ar.draw(can)
    
    can.close()

def get_week_span(day):
    """Returns the dates for the start and the end of the week that
    DAY belongs to.
    """
    week_start = day - datetime.timedelta(days=day.weekday())
    week_end = week_start + datetime.timedelta(days=6)
    
    return week_start, week_end

def parse_options():
    parser = optparse.OptionParser(usage = '%prog [options] [file] [file] ...',
                                   version = '%%prog version %s' %
                                   (__version__))
    
    for option, description in ttpd_analyze_options:
        TTP.Options.update_help(description)
        parser.add_option(*option, **description)
        
    options, args = parser.parse_args()
    
    options.group_by = options.group_by.split(',')
    if options.restrict_to:
        options.restrict_to = dict([tuple(x.split('='))
                                    for x in options.restrict_to.split(',')])
    
    for moment, default in [('start', datetime.date.min),
                            ('end', datetime.date.max)]:
        if getattr(options, moment):
            setattr(options, moment,
                    datetime.date(*time.strptime(getattr(options, moment),
                                                 '%Y-%m-%d')[:3]))
        else:
            setattr(options, moment, default)

    # Handle week resolution, if that is wanted.
    if options.week:
        if options.week == 'this':
            day = datetime.date.today()
        else:
            # Use strptime(3) convert a string representation of time
            # to a time tm structure.  Both week and weekday number is
            # needed.
            raw_date = time.strptime(options.week + ',1', '%Y,%W,%w')
            day = datetime.date.fromtimestamp(time.mktime(raw_date))
            
        if (not options.end) or (options.end == datetime.date.max):            
            options.start, options.end = get_week_span(day)
        else:
            options.start = get_week_span(day)[0]
            
    return options, args

def transactions_from_files(options, args):
    transactions = []
    
    for file in args:
        lines = file_filter(options, file)
        
        for trans in lines:
            convert_types(trans)

            if (trans['date'] < options.start) or (options.end < trans['date']):
                continue

            if options.unified_client_address != None:
                trans['host'] = options.unified_client_address
            
            if options.filter_only:
                print format_trans(trans)
                continue
                
            transactions.append(trans)
            
    if options.filter_only:
        return

    # Insert temporal resolution place-holders.
    t = datetime.datetime.combine(options.start, datetime.time())

    end = datetime.datetime.combine(options.end, datetime.time(23, 59, 00))

    #print "Before"
    #print '\n'.join(['%s' % str(x['date'].isocalendar()[0:2])
    #                 for x in transactions])
    while t < end:
        obj = {'date': t}
        
        for key in ['interface', 'host', 'trans_type']:
            if key in options.restrict_to:
                obj[key] = options.restrict_to[key]
            else:
                obj[key] = None
                
        transactions.append(obj)
        t += resolutions[options.resolution][4]
        
    transactions.sort()

    #print "After sort()"
    #print '\n'.join(['%s' % str(x['date'].isocalendar()[0:2])
    #                 for x in transactions])
    return transactions

def main():
    """Module mainline (for standalone execution)."""
    options, args = parse_options()

    # Add the contents of each file to the list of transactions.
    transactions = transactions_from_files(options, args)
    
    # Create the temporal groups, dependent of options.resolution.
    groups = group_by(lambda x:
                      resolutions[options.resolution][1](x['date']),
                      transactions)

    #print "After 1st group_by()"
    #print '\n'.join(['%s' % str(x) for x in groups])
    
    #print groups
    
    units = groups.keys()
    units.sort()

    L = []
    
    for unit in units:
        #print resolutions[options.resolution][0] % unit
        
        subgroups = group_by(lambda x:
                             tuple([x[key] for key in options.group_by]),
                             groups[unit])
        
        subunits = subgroups.keys()
        subunits.sort()

        for subunit in subunits:

            billing = 0
            
            for trans in subgroups[subunit]:
                #print format_trans(trans)
                if options.cost:
                    billing += trans['billing']
                else:
                    if 'billing' in trans: # Place-holder trick
                        billing += 1
                    
            for i, field in enumerate(options.group_by):
                if (field in options.restrict_to) and \
                       (options.restrict_to[field] != subunit[i]):
                    break
            else:
                L.append((trans, unit, subunit, billing))

    if not transactions:
        return
    
    print '# This analysis was generated %s' % str(datetime.datetime.now())
    print '# by %s version %s.' % (os.path.basename(__file__), __version__)
    print '# First entry %s, and last entry %s.' % (transactions[0]['date'],
                                                    transactions[-1]['date'])
    
    if options.period:
        
        stats = group_by(lambda x:
                         periods[options.period][1](x[0]['date']),
                         L)

        print '# %12s:%12s%12s%12s' % \
              (periods[options.period][2], 'Average', '-', '+')
        output = []
        
        for y in stats:
            #print y, stats[y]
            values = [x[3] for x in stats[y]]
            average = sum(values) / float(len(values))
            low, high = min(values), max(values)
            #print (y, low, average, high)
            output.append((periods[options.period][0](y),
                           average, (average - low), (high - average)))
            
            
        print '\n'.join(['%14s:%12.2f%12.2f%12.2f' % x for x in output])
        
    else:
        print '\n'.join(['%s: %s: %6d' %
                         (resolutions[options.resolution][0](x[1]),
                          x[2], x[3]) for x in L])

    # Produce some graphical charts.
    
    if options.chart:

        if options.period:
            make_avg_chart(output, periods[options.period][2],
                           options.chart)
        else:
            make_chart(L, resolutions[options.resolution][2],
                       options.chart, resolutions[options.resolution][0])
            
    return


if __name__ == "__main__":
    main()
